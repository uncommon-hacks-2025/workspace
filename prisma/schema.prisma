generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  JournalEntry  JournalEntry?
  Profile       Profile[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Profile {
  id                String             @id @default(cuid())
  userId            String
  gender            String
  height            Int
  weight            Int
  dateOfBirth       DateTime
  medicalConditions MedicalCondition[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MedicalCondition {
  id            String   @id @default(cuid())
  profileId     String
  condition     String
  diagnosedDate DateTime
  status        String
  treatments    String?
  notes         String?
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Feedback {
  id      String  @id
  answer1 String?
  answer2 String?
}

model JournalEntry {
  id               String   @id
  entryTitle       String
  entryDate        DateTime @db.Date
  medicationsTaken String?
  symptomsHad      String?
  sleep            Decimal? @db.Decimal(3, 1)
  otherNotes       String?
  User             User     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}
